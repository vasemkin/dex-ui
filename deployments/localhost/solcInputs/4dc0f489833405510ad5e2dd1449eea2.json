{
  "language": "Solidity",
  "sources": {
    "contracts/Dex.sol": {
      "content": "pragma solidity ^0.8.4;\n// SPDX-License-Identifier: MIT\n// import \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DEX {\n    IERC20 private token;\n    uint256 public lockedLiquidity;\n    mapping(address => uint256) public liquidity;\n\n    event Deposit(address indexed _from, uint256 _tokenValue, uint256 _ethValue);\n    event Withdraw(address indexed _to, uint256 _tokenValue, uint256 _ethValue);\n\n    constructor(address _token) {\n        token = IERC20(_token);\n    }\n\n    function initialize(uint256 _tokenAmount) public payable returns (uint256) {\n        require(lockedLiquidity == 0, \"DEX already initialized.\");\n        require(token.balanceOf(msg.sender) >= _tokenAmount, \"Token balance not sufficient.\");\n        require(\n            token.allowance(msg.sender, address(this)) >= _tokenAmount,\n            \"Token allowance not sufficient.\"\n        );\n        lockedLiquidity = address(this).balance;\n        liquidity[msg.sender] = lockedLiquidity;\n        require(\n            token.transferFrom(msg.sender, address(this), _tokenAmount),\n            \"Error transferring tokens\"\n        );\n        return lockedLiquidity;\n    }\n\n    function price(\n        uint256 _inputAmount,\n        uint256 _inputReserve,\n        uint256 _outputReserve\n    ) public pure returns (uint256) {\n        uint256 amountWithFee = _inputAmount * 997;\n        uint256 numerator = amountWithFee * _outputReserve;\n        uint256 denominator = _inputReserve * 1000 + amountWithFee;\n        return numerator / denominator;\n    }\n\n    function ethToToken() public payable returns (uint256) {\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 tokensBought = price(msg.value, address(this).balance - msg.value, tokenReserve);\n        require(token.transfer(msg.sender, tokensBought), \"Error transferring the token.\");\n        return tokensBought;\n    }\n\n    function estimateTokenAmount(uint256 _eth, uint256 _gas) public view returns (uint256) {\n        return price(_eth, address(this).balance - _eth - _gas, token.balanceOf(address(this)));\n    }\n\n    function estimateEthAmount(uint256 _tokens) public view returns (uint256) {\n        return price(_tokens, token.balanceOf(address(this)), address(this).balance);\n    }\n\n    function tokenToEth(uint256 tokens) public returns (uint256) {\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance);\n        (bool sent, ) = msg.sender.call{value: ethBought}(\"\");\n        require(sent, \"Failed to send user eth.\");\n        require(\n            token.transferFrom(msg.sender, address(this), tokens),\n            \"Error transferring the token.\"\n        );\n        return ethBought;\n    }\n\n    function deposit() public payable returns (uint256) {\n        uint256 ethReserve = address(this).balance - msg.value;\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 tokenAmount = ((msg.value * tokenReserve) / ethReserve) + 1;\n        uint256 liquidityMinted = (msg.value * lockedLiquidity) / ethReserve;\n        liquidity[msg.sender] += liquidityMinted;\n        lockedLiquidity += liquidityMinted;\n        require(\n            token.transferFrom(msg.sender, address(this), tokenAmount),\n            \"Error transeffing the token.\"\n        );\n        emit Deposit(msg.sender, tokenAmount, msg.value);\n        return liquidityMinted;\n    }\n\n    function withdraw(uint256 _liquidityAmount) public returns (uint256, uint256) {\n        uint256 tokenReserve = token.balanceOf(address(this));\n        uint256 ethAmount = (_liquidityAmount * address(this).balance) / lockedLiquidity;\n        uint256 tokenAmount = (_liquidityAmount * tokenReserve) / lockedLiquidity;\n        liquidity[msg.sender] -= _liquidityAmount;\n        lockedLiquidity -= _liquidityAmount;\n        (bool sent, ) = msg.sender.call{value: ethAmount}(\"\");\n        require(sent, \"Failed to send user eth.\");\n        require(token.transfer(msg.sender, tokenAmount), \"Error transferring the token\");\n        emit Withdraw(msg.sender, tokenAmount, ethAmount);\n        return (ethAmount, tokenAmount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}